'''
ioutil | ioutil.py
~~~~~~~~~~~~~~~~~~

Utility functions related to file IO.

'''

import itertools
import os

import openpyxl

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CSV Report ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
def getPrimerPairProductSize(pc1, pc2):
    ''' Calculate the PCR product size generated by `pc1` and `pc2`
    '''
    pc1_5p_idx = pc1.idx
    pc2_5p_idx = pc2.idx
    if pc1.strand == -1:
        pc1_5p_idx += pc1.length
    if pc2.strand == -1:
        pc2_5p_idx += pc2.length
    return abs(pc1.idx - pc2.idx)


def writePrimerRec(fd, primer_obj, idx_lut, recoded_idx=True,
                   gen_wt_idx=False):
    ''' Write a single line to `fd` constituting a primer record for the
    provided `primer_obj`, which is a CandidatePrimer namedtuple
    '''
    po = primer_obj
    if recoded_idx:
        if gen_wt_idx:
            po_idx = '{},{}'.format(po.idx, idx_lut[po.idx])
        else:
            po_idx = '{},N/A'.format(po.idx, idx_lut[po.idx])
    else:
        po_idx = 'N/A,{}'.format(po.idx)
    fd.write(','.join([str(x) for x in [
        po.strand, po_idx, po.length, po.seq, sum(po.mismatch_idxs),
        max(0, po.tm), max(0, po.tm_hairpin), max(0, po.tm_homo)]]) + '\n')


def writeCsvReport(idx_lut, set_of_primer_sets, combined_bins, params):
    ''' Write an informational output report in csv format.
    '''
    output_fp = os.path.join(params['output_fp'], params['output_basename'] + 
                             '_masc_report.csv')

    with open(output_fp, 'w') as fd_out:

        fd_out.write(','.join([
            'Bin number',
            'Potential pairs found',
            'Pair chosen',
            'Ideal PCR product size',
            'Actual PCR product size',
            'Pair score',
            'Included # of gen9 fragment junctions',
            'Discriminatory power (# mismatches)'
            ]) + '\n')

        for bin_idx, ps_idx in enumerate(set_of_primer_sets):
            primer_set = combined_bins[bin_idx][ps_idx]
            fp = primer_set.d_primer
            rp = primer_set.c_primer
            fd_out.write(','.join([str(x) for x in [
                bin_idx + 1,
                len(combined_bins[bin_idx]),
                ps_idx,
                params['product_sizes'][bin_idx],
                getPrimerPairProductSize(fp, rp),
                primer_set[0],
                int(primer_set[0])/50,
                sum(fp.mismatch_idxs)
                ]]) + '\n')

        fd_out.write('\n' + ','.join([
            'Bin number',
            'Primer type',
            'Strand',
            'Recoded Index',
            'Wildtype Index',
            'Length',
            'Sequence',
            'Number of mismatches',
            'Tm (C)',
            'Hairpin Tm (C)',
            'Homodimer Tm (C)'
            ]) + '\n')

        for bin_idx, ps_idx in enumerate(set_of_primer_sets):
            primer_set = combined_bins[bin_idx][ps_idx]
            d_primer = primer_set.d_primer
            w_primer = primer_set.w_primer
            c_primer = primer_set.c_primer
            fd_out.write('{},Discriminatory primer,'.format(bin_idx+1))
            writePrimerRec(fd_out, d_primer, idx_lut)
            fd_out.write(',Wildtype primer,')
            writePrimerRec(fd_out, w_primer, idx_lut, recoded_idx=False)
            fd_out.write(',Common primer,')
            writePrimerRec(fd_out, c_primer, idx_lut, gen_wt_idx=True)

        if params['dump_params']:
            fd_out.write('\nDESIGN PARAMETERS' + '\n' + '\n'.join(
                ['{},{}'.format(k, repr(v).replace(',', ';')) for k, v in
                 params.items()]))

    print('Wrote output report to %s' % output_fp)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~ IDT-format .xslx file ~~~~~~~~~~~~~~~~~~~~~~~~~~ #
_IDT_HEADERS = ['WellPosition', 'Name', 'Sequence', 'Notes']
_IDT_HEADER_POSITIONS = ['A1', 'B1', 'C1', 'D1']

def wellGen():
    ''' Return well ID by row (A1, A2, ... A11, A12, B1, B2 ...)
    '''
    for col, row in itertools.product('ABCDEFGH', range(1, 13)):
        yield col + ('%02d' % row)


def writeIdtXslxFile(idx_lut, set_of_primer_sets, combined_bins, params):
    ob = params['output_basename']
    wb = openpyxl.Workbook()
    ws = wb.active
    for cell_id, header in zip(_IDT_HEADER_POSITIONS, _IDT_HEADERS):
        ws.cell(cell_id).value = header
    cur_row = 2
    wg = wellGen()
    for bin_idx, set_idx in enumerate(set_of_primer_sets):
        primer_set = combined_bins[bin_idx][set_idx]
        # Discriminatory primer
        ws.cell('A%d' % cur_row).value = wg.next()
        ws.cell('B%d' % cur_row).value = '%s.%d.d' % (ob, bin_idx + 1)
        ws.cell('C%d' % cur_row).value = primer_set.d_primer.seq
        cur_row += 1
        # Wildtype primer
        ws.cell('A%d' % cur_row).value = wg.next()
        ws.cell('B%d' % cur_row).value = '%s.%d.wt' % (ob, bin_idx + 1)
        ws.cell('C%d' % cur_row).value = primer_set.w_primer.seq
        cur_row += 1
        # Common primer
        ws.cell('A%d' % cur_row).value = wg.next()
        ws.cell('B%d' % cur_row).value = '%s.%d.c' % (ob, bin_idx + 1)
        ws.cell('C%d' % cur_row).value = primer_set.c_primer.seq
        cur_row += 1
    output_fp = os.path.join(params['output_fp'], params['output_basename'] + 
                          '_masc_order.xlsx')
    wb.save(output_fp)
    print('Wrote output .xlsx to %s' % output_fp)
